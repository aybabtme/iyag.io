/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var iyag_io_chat_entry_pb = require('../../../iyag.io/chat/entry_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventReq.Join', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventReq.Leave', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventReq.Send', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventReq.Typing', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventRes.UserJoined', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventRes.UserLeft', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventRes.UserSent', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventRes.UserTyping', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventReq.displayName = 'proto.iyag.io.chat.chatsrv.EventReq';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_ = [[201,202,203,204]];

/**
 * @enum {number}
 */
proto.iyag.io.chat.chatsrv.EventReq.EventCase = {
  EVENT_NOT_SET: 0,
  JOIN: 201,
  LEAVE: 202,
  TYPING: 203,
  SEND: 204
};

/**
 * @return {proto.iyag.io.chat.chatsrv.EventReq.EventCase}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getEventCase = function() {
  return /** @type {proto.iyag.io.chat.chatsrv.EventReq.EventCase} */(jspb.Message.computeOneofCase(this, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 101, ""),
    authorId: jspb.Message.getFieldWithDefault(msg, 102, ""),
    join: (f = msg.getJoin()) && proto.iyag.io.chat.chatsrv.EventReq.Join.toObject(includeInstance, f),
    leave: (f = msg.getLeave()) && proto.iyag.io.chat.chatsrv.EventReq.Leave.toObject(includeInstance, f),
    typing: (f = msg.getTyping()) && proto.iyag.io.chat.chatsrv.EventReq.Typing.toObject(includeInstance, f),
    send: (f = msg.getSend()) && proto.iyag.io.chat.chatsrv.EventReq.Send.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq}
 */
proto.iyag.io.chat.chatsrv.EventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventReq;
  return proto.iyag.io.chat.chatsrv.EventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq}
 */
proto.iyag.io.chat.chatsrv.EventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    case 201:
      var value = new proto.iyag.io.chat.chatsrv.EventReq.Join;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventReq.Join.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 202:
      var value = new proto.iyag.io.chat.chatsrv.EventReq.Leave;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventReq.Leave.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    case 203:
      var value = new proto.iyag.io.chat.chatsrv.EventReq.Typing;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventReq.Typing.deserializeBinaryFromReader);
      msg.setTyping(value);
      break;
    case 204:
      var value = new proto.iyag.io.chat.chatsrv.EventReq.Send;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventReq.Send.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      102,
      f
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.iyag.io.chat.chatsrv.EventReq.Join.serializeBinaryToWriter
    );
  }
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.iyag.io.chat.chatsrv.EventReq.Leave.serializeBinaryToWriter
    );
  }
  f = message.getTyping();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.iyag.io.chat.chatsrv.EventReq.Typing.serializeBinaryToWriter
    );
  }
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.iyag.io.chat.chatsrv.EventReq.Send.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventReq.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventReq.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventReq.Join.displayName = 'proto.iyag.io.chat.chatsrv.EventReq.Join';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventReq.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Join} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Join}
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventReq.Join;
  return proto.iyag.io.chat.chatsrv.EventReq.Join.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Join} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Join}
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventReq.Join.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Join} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Join.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventReq.Leave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventReq.Leave.displayName = 'proto.iyag.io.chat.chatsrv.EventReq.Leave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventReq.Leave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Leave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Leave}
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventReq.Leave;
  return proto.iyag.io.chat.chatsrv.EventReq.Leave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Leave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Leave}
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventReq.Leave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Leave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Leave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventReq.Typing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventReq.Typing.displayName = 'proto.iyag.io.chat.chatsrv.EventReq.Typing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventReq.Typing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Typing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Typing}
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventReq.Typing;
  return proto.iyag.io.chat.chatsrv.EventReq.Typing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Typing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Typing}
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventReq.Typing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Typing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Typing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventReq.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventReq.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventReq.Send.displayName = 'proto.iyag.io.chat.chatsrv.EventReq.Send';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventReq.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: (f = msg.getEntry()) && iyag_io_chat_entry_pb.Entry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Send}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventReq.Send;
  return proto.iyag.io.chat.chatsrv.EventReq.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventReq.Send}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_entry_pb.Entry;
      reader.readMessage(value,iyag_io_chat_entry_pb.Entry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventReq.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventReq.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_entry_pb.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.Entry entry = 1;
 * @return {?proto.iyag.io.chat.Entry}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.getEntry = function() {
  return /** @type{?proto.iyag.io.chat.Entry} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_entry_pb.Entry, 1));
};


/** @param {?proto.iyag.io.chat.Entry|undefined} value */
proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventReq.Send.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string channel_id = 101;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setChannelId = function(value) {
  jspb.Message.setProto3StringField(this, 101, value);
};


/**
 * optional string author_id = 102;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 102, value);
};


/**
 * optional Join join = 201;
 * @return {?proto.iyag.io.chat.chatsrv.EventReq.Join}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getJoin = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventReq.Join} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventReq.Join, 201));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventReq.Join|undefined} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventReq.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional Leave leave = 202;
 * @return {?proto.iyag.io.chat.chatsrv.EventReq.Leave}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getLeave = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventReq.Leave} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventReq.Leave, 202));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventReq.Leave|undefined} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setLeave = function(value) {
  jspb.Message.setOneofWrapperField(this, 202, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventReq.prototype.clearLeave = function() {
  this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional Typing typing = 203;
 * @return {?proto.iyag.io.chat.chatsrv.EventReq.Typing}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getTyping = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventReq.Typing} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventReq.Typing, 203));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventReq.Typing|undefined} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setTyping = function(value) {
  jspb.Message.setOneofWrapperField(this, 203, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventReq.prototype.clearTyping = function() {
  this.setTyping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.hasTyping = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional Send send = 204;
 * @return {?proto.iyag.io.chat.chatsrv.EventReq.Send}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.getSend = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventReq.Send} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventReq.Send, 204));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventReq.Send|undefined} value */
proto.iyag.io.chat.chatsrv.EventReq.prototype.setSend = function(value) {
  jspb.Message.setOneofWrapperField(this, 204, proto.iyag.io.chat.chatsrv.EventReq.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventReq.prototype.clearSend = function() {
  this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventReq.prototype.hasSend = function() {
  return jspb.Message.getField(this, 204) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventRes.displayName = 'proto.iyag.io.chat.chatsrv.EventRes';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_ = [[201,202,203,204]];

/**
 * @enum {number}
 */
proto.iyag.io.chat.chatsrv.EventRes.EventCase = {
  EVENT_NOT_SET: 0,
  USER_JOINED: 201,
  USER_LEFT: 202,
  USER_TYPING: 203,
  USER_SENT: 204
};

/**
 * @return {proto.iyag.io.chat.chatsrv.EventRes.EventCase}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getEventCase = function() {
  return /** @type {proto.iyag.io.chat.chatsrv.EventRes.EventCase} */(jspb.Message.computeOneofCase(this, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 101, ""),
    userJoined: (f = msg.getUserJoined()) && proto.iyag.io.chat.chatsrv.EventRes.UserJoined.toObject(includeInstance, f),
    userLeft: (f = msg.getUserLeft()) && proto.iyag.io.chat.chatsrv.EventRes.UserLeft.toObject(includeInstance, f),
    userTyping: (f = msg.getUserTyping()) && proto.iyag.io.chat.chatsrv.EventRes.UserTyping.toObject(includeInstance, f),
    userSent: (f = msg.getUserSent()) && proto.iyag.io.chat.chatsrv.EventRes.UserSent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes}
 */
proto.iyag.io.chat.chatsrv.EventRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventRes;
  return proto.iyag.io.chat.chatsrv.EventRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes}
 */
proto.iyag.io.chat.chatsrv.EventRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 201:
      var value = new proto.iyag.io.chat.chatsrv.EventRes.UserJoined;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventRes.UserJoined.deserializeBinaryFromReader);
      msg.setUserJoined(value);
      break;
    case 202:
      var value = new proto.iyag.io.chat.chatsrv.EventRes.UserLeft;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventRes.UserLeft.deserializeBinaryFromReader);
      msg.setUserLeft(value);
      break;
    case 203:
      var value = new proto.iyag.io.chat.chatsrv.EventRes.UserTyping;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventRes.UserTyping.deserializeBinaryFromReader);
      msg.setUserTyping(value);
      break;
    case 204:
      var value = new proto.iyag.io.chat.chatsrv.EventRes.UserSent;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventRes.UserSent.deserializeBinaryFromReader);
      msg.setUserSent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getUserJoined();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.iyag.io.chat.chatsrv.EventRes.UserJoined.serializeBinaryToWriter
    );
  }
  f = message.getUserLeft();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.iyag.io.chat.chatsrv.EventRes.UserLeft.serializeBinaryToWriter
    );
  }
  f = message.getUserTyping();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.iyag.io.chat.chatsrv.EventRes.UserTyping.serializeBinaryToWriter
    );
  }
  f = message.getUserSent();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.iyag.io.chat.chatsrv.EventRes.UserSent.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventRes.UserJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventRes.UserJoined.displayName = 'proto.iyag.io.chat.chatsrv.EventRes.UserJoined';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventRes.UserJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserJoined}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventRes.UserJoined;
  return proto.iyag.io.chat.chatsrv.EventRes.UserJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserJoined}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventRes.UserJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventRes.UserJoined.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventRes.UserLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventRes.UserLeft.displayName = 'proto.iyag.io.chat.chatsrv.EventRes.UserLeft';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventRes.UserLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserLeft}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventRes.UserLeft;
  return proto.iyag.io.chat.chatsrv.EventRes.UserLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserLeft}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventRes.UserLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventRes.UserLeft.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventRes.UserTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventRes.UserTyping.displayName = 'proto.iyag.io.chat.chatsrv.EventRes.UserTyping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventRes.UserTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserTyping}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventRes.UserTyping;
  return proto.iyag.io.chat.chatsrv.EventRes.UserTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserTyping}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventRes.UserTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventRes.UserTyping.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventRes.UserSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventRes.UserSent.displayName = 'proto.iyag.io.chat.chatsrv.EventRes.UserSent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventRes.UserSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entry: (f = msg.getEntry()) && iyag_io_chat_entry_pb.Entry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserSent}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventRes.UserSent;
  return proto.iyag.io.chat.chatsrv.EventRes.UserSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventRes.UserSent}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    case 2:
      var value = new iyag_io_chat_entry_pb.Entry;
      reader.readMessage(value,iyag_io_chat_entry_pb.Entry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventRes.UserSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventRes.UserSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      iyag_io_chat_entry_pb.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional iyag.io.chat.Entry entry = 2;
 * @return {?proto.iyag.io.chat.Entry}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.getEntry = function() {
  return /** @type{?proto.iyag.io.chat.Entry} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_entry_pb.Entry, 2));
};


/** @param {?proto.iyag.io.chat.Entry|undefined} value */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventRes.UserSent.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string channel_id = 101;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventRes.prototype.setChannelId = function(value) {
  jspb.Message.setProto3StringField(this, 101, value);
};


/**
 * optional UserJoined user_joined = 201;
 * @return {?proto.iyag.io.chat.chatsrv.EventRes.UserJoined}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getUserJoined = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventRes.UserJoined} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventRes.UserJoined, 201));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventRes.UserJoined|undefined} value */
proto.iyag.io.chat.chatsrv.EventRes.prototype.setUserJoined = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventRes.prototype.clearUserJoined = function() {
  this.setUserJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.hasUserJoined = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional UserLeft user_left = 202;
 * @return {?proto.iyag.io.chat.chatsrv.EventRes.UserLeft}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getUserLeft = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventRes.UserLeft} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventRes.UserLeft, 202));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventRes.UserLeft|undefined} value */
proto.iyag.io.chat.chatsrv.EventRes.prototype.setUserLeft = function(value) {
  jspb.Message.setOneofWrapperField(this, 202, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventRes.prototype.clearUserLeft = function() {
  this.setUserLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.hasUserLeft = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional UserTyping user_typing = 203;
 * @return {?proto.iyag.io.chat.chatsrv.EventRes.UserTyping}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getUserTyping = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventRes.UserTyping} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventRes.UserTyping, 203));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventRes.UserTyping|undefined} value */
proto.iyag.io.chat.chatsrv.EventRes.prototype.setUserTyping = function(value) {
  jspb.Message.setOneofWrapperField(this, 203, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventRes.prototype.clearUserTyping = function() {
  this.setUserTyping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.hasUserTyping = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional UserSent user_sent = 204;
 * @return {?proto.iyag.io.chat.chatsrv.EventRes.UserSent}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.getUserSent = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventRes.UserSent} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventRes.UserSent, 204));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventRes.UserSent|undefined} value */
proto.iyag.io.chat.chatsrv.EventRes.prototype.setUserSent = function(value) {
  jspb.Message.setOneofWrapperField(this, 204, proto.iyag.io.chat.chatsrv.EventRes.oneofGroups_[0], value);
};


proto.iyag.io.chat.chatsrv.EventRes.prototype.clearUserSent = function() {
  this.setUserSent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventRes.prototype.hasUserSent = function() {
  return jspb.Message.getField(this, 204) != null;
};


goog.object.extend(exports, proto.iyag.io.chat.chatsrv);
