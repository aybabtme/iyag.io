/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var iyag_io_chat_event_pb = require('../../../iyag.io/chat/event_pb.js');
var iyag_io_chat_entry_pb = require('../../../iyag.io/chat/entry_pb.js');
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventArchiveReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventArchiveRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventAuth', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventCreateReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventCreateRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventJoinReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventJoinRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventLeaveReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventLeaveRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventSendReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventSendRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventTypeReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.EventTypeRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.GetStateReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.GetStateRes', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.ListenUserEventReq', null, global);
goog.exportSymbol('proto.iyag.io.chat.chatsrv.ListenUserEventRes', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventAuth.displayName = 'proto.iyag.io.chat.chatsrv.EventAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventAuth;
  return proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string author_id = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventAuth.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventCreateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventCreateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventCreateReq.displayName = 'proto.iyag.io.chat.chatsrv.EventCreateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventCreateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventCreateReq}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventCreateReq;
  return proto.iyag.io.chat.chatsrv.EventCreateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventCreateReq}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventCreateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventCreateReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventCreateRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventCreateRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventCreateRes.displayName = 'proto.iyag.io.chat.chatsrv.EventCreateRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventCreateRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventCreateRes}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventCreateRes;
  return proto.iyag.io.chat.chatsrv.EventCreateRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventCreateRes}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventCreateRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventCreateRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventCreateRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventArchiveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventArchiveReq.displayName = 'proto.iyag.io.chat.chatsrv.EventArchiveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventArchiveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventArchiveReq}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventArchiveReq;
  return proto.iyag.io.chat.chatsrv.EventArchiveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventArchiveReq}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventArchiveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventArchiveReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventArchiveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventArchiveRes.displayName = 'proto.iyag.io.chat.chatsrv.EventArchiveRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventArchiveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventArchiveRes}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventArchiveRes;
  return proto.iyag.io.chat.chatsrv.EventArchiveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventArchiveRes}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventArchiveRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventArchiveRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventArchiveRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventJoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventJoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventJoinReq.displayName = 'proto.iyag.io.chat.chatsrv.EventJoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventJoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventJoinReq}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventJoinReq;
  return proto.iyag.io.chat.chatsrv.EventJoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventJoinReq}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventJoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventJoinReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventJoinRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventJoinRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventJoinRes.displayName = 'proto.iyag.io.chat.chatsrv.EventJoinRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventJoinRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventJoinRes}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventJoinRes;
  return proto.iyag.io.chat.chatsrv.EventJoinRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventJoinRes}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventJoinRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventJoinRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventJoinRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventLeaveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventLeaveReq.displayName = 'proto.iyag.io.chat.chatsrv.EventLeaveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventLeaveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventLeaveReq}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventLeaveReq;
  return proto.iyag.io.chat.chatsrv.EventLeaveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventLeaveReq}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventLeaveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventLeaveReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventLeaveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventLeaveRes.displayName = 'proto.iyag.io.chat.chatsrv.EventLeaveRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventLeaveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventLeaveRes}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventLeaveRes;
  return proto.iyag.io.chat.chatsrv.EventLeaveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventLeaveRes}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventLeaveRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventLeaveRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventLeaveRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventTypeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventTypeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventTypeReq.displayName = 'proto.iyag.io.chat.chatsrv.EventTypeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventTypeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventTypeReq}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventTypeReq;
  return proto.iyag.io.chat.chatsrv.EventTypeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventTypeReq}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventTypeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventTypeReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventTypeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventTypeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventTypeRes.displayName = 'proto.iyag.io.chat.chatsrv.EventTypeRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventTypeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventTypeRes}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventTypeRes;
  return proto.iyag.io.chat.chatsrv.EventTypeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventTypeRes}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventTypeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventTypeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventTypeRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventSendReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventSendReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventSendReq.displayName = 'proto.iyag.io.chat.chatsrv.EventSendReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventSendReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventSendReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventSendReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    auth: (f = msg.getAuth()) && proto.iyag.io.chat.chatsrv.EventAuth.toObject(includeInstance, f),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    entry: (f = msg.getEntry()) && iyag_io_chat_entry_pb.Entry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventSendReq}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventSendReq;
  return proto.iyag.io.chat.chatsrv.EventSendReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventSendReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventSendReq}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iyag.io.chat.chatsrv.EventAuth;
      reader.readMessage(value,proto.iyag.io.chat.chatsrv.EventAuth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 4:
      var value = new iyag_io_chat_entry_pb.Entry;
      reader.readMessage(value,iyag_io_chat_entry_pb.Entry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventSendReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventSendReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventSendReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iyag.io.chat.chatsrv.EventAuth.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      iyag_io_chat_entry_pb.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventAuth auth = 1;
 * @return {?proto.iyag.io.chat.chatsrv.EventAuth}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.getAuth = function() {
  return /** @type{?proto.iyag.io.chat.chatsrv.EventAuth} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.chatsrv.EventAuth, 1));
};


/** @param {?proto.iyag.io.chat.chatsrv.EventAuth|undefined} value */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.setAuth = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventSendReq.prototype.clearAuth = function() {
  this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string channel_name = 3;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional iyag.io.chat.Entry entry = 4;
 * @return {?proto.iyag.io.chat.Entry}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.getEntry = function() {
  return /** @type{?proto.iyag.io.chat.Entry} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_entry_pb.Entry, 4));
};


/** @param {?proto.iyag.io.chat.Entry|undefined} value */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.iyag.io.chat.chatsrv.EventSendReq.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventSendReq.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.EventSendRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.EventSendRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.EventSendRes.displayName = 'proto.iyag.io.chat.chatsrv.EventSendRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.EventSendRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.EventSendRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventSendRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMeta: (f = msg.getEventMeta()) && iyag_io_chat_event_pb.EventMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.EventSendRes}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.EventSendRes;
  return proto.iyag.io.chat.chatsrv.EventSendRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.EventSendRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.EventSendRes}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.EventMeta;
      reader.readMessage(value,iyag_io_chat_event_pb.EventMeta.deserializeBinaryFromReader);
      msg.setEventMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.EventSendRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.EventSendRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.EventSendRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.EventMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.EventMeta event_meta = 1;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.prototype.getEventMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.EventMeta, 1));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.chatsrv.EventSendRes.prototype.setEventMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.EventSendRes.prototype.clearEventMeta = function() {
  this.setEventMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.EventSendRes.prototype.hasEventMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.GetStateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.GetStateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.GetStateReq.displayName = 'proto.iyag.io.chat.chatsrv.GetStateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.GetStateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.GetStateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.GetStateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.GetStateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.GetStateReq}
 */
proto.iyag.io.chat.chatsrv.GetStateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.GetStateReq;
  return proto.iyag.io.chat.chatsrv.GetStateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.GetStateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.GetStateReq}
 */
proto.iyag.io.chat.chatsrv.GetStateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.GetStateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.GetStateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.GetStateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.GetStateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.GetStateReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.GetStateReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.GetStateRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.GetStateRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.GetStateRes.displayName = 'proto.iyag.io.chat.chatsrv.GetStateRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.GetStateRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.GetStateRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.GetStateRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && iyag_io_chat_event_pb.ChannelState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.GetStateRes}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.GetStateRes;
  return proto.iyag.io.chat.chatsrv.GetStateRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.GetStateRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.GetStateRes}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.ChannelState;
      reader.readMessage(value,iyag_io_chat_event_pb.ChannelState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.GetStateRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.GetStateRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.GetStateRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.ChannelState.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.ChannelState state = 1;
 * @return {?proto.iyag.io.chat.ChannelState}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.prototype.getState = function() {
  return /** @type{?proto.iyag.io.chat.ChannelState} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.ChannelState, 1));
};


/** @param {?proto.iyag.io.chat.ChannelState|undefined} value */
proto.iyag.io.chat.chatsrv.GetStateRes.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.GetStateRes.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.GetStateRes.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.ListenUserEventReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.ListenUserEventReq.displayName = 'proto.iyag.io.chat.chatsrv.ListenUserEventReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.ListenUserEventReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromSequence: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.ListenUserEventReq}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.ListenUserEventReq;
  return proto.iyag.io.chat.chatsrv.ListenUserEventReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.ListenUserEventReq}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.ListenUserEventReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 from_sequence = 2;
 * @return {number}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.getFromSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iyag.io.chat.chatsrv.ListenUserEventReq.prototype.setFromSequence = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.chatsrv.ListenUserEventRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.chatsrv.ListenUserEventRes.displayName = 'proto.iyag.io.chat.chatsrv.ListenUserEventRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.chatsrv.ListenUserEventRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && iyag_io_chat_event_pb.ChannelUserEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.chatsrv.ListenUserEventRes}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.chatsrv.ListenUserEventRes;
  return proto.iyag.io.chat.chatsrv.ListenUserEventRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.chatsrv.ListenUserEventRes}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_event_pb.ChannelUserEvent;
      reader.readMessage(value,iyag_io_chat_event_pb.ChannelUserEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.chatsrv.ListenUserEventRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.chatsrv.ListenUserEventRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_event_pb.ChannelUserEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional iyag.io.chat.ChannelUserEvent event = 1;
 * @return {?proto.iyag.io.chat.ChannelUserEvent}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.getEvent = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_event_pb.ChannelUserEvent, 1));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent|undefined} value */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.chatsrv.ListenUserEventRes.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.iyag.io.chat.chatsrv);
