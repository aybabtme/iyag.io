/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var iyag_io_chat_entry_pb = require('../../iyag.io/chat/entry_pb.js');
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Archive', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Create', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Join', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Leave', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Send', null, global);
goog.exportSymbol('proto.iyag.io.chat.ChannelUserEvent.Type', null, global);
goog.exportSymbol('proto.iyag.io.chat.EventMeta', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.EventMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.EventMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.EventMeta.displayName = 'proto.iyag.io.chat.EventMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.EventMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.EventMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.EventMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.EventMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.EventMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.EventMeta;
  return proto.iyag.io.chat.EventMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.EventMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.EventMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.EventMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.EventMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.EventMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.EventMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.iyag.io.chat.EventMeta.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.EventMeta.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iyag.io.chat.EventMeta.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iyag.io.chat.EventMeta.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.iyag.io.chat.EventMeta.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.EventMeta.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 sequence = 3;
 * @return {number}
 */
proto.iyag.io.chat.EventMeta.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iyag.io.chat.EventMeta.prototype.setSequence = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.displayName = 'proto.iyag.io.chat.ChannelUserEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iyag.io.chat.ChannelUserEvent.oneofGroups_ = [[201,202,203,204,205,206]];

/**
 * @enum {number}
 */
proto.iyag.io.chat.ChannelUserEvent.EventCase = {
  EVENT_NOT_SET: 0,
  CREATED: 201,
  ARCHIVED: 202,
  JOINED: 203,
  LEFT: 204,
  TYPED: 205,
  SENT: 206
};

/**
 * @return {proto.iyag.io.chat.ChannelUserEvent.EventCase}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getEventCase = function() {
  return /** @type {proto.iyag.io.chat.ChannelUserEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.iyag.io.chat.EventMeta.toObject(includeInstance, f),
    channelName: jspb.Message.getFieldWithDefault(msg, 101, ""),
    authorId: jspb.Message.getFieldWithDefault(msg, 102, ""),
    created: (f = msg.getCreated()) && proto.iyag.io.chat.ChannelUserEvent.Create.toObject(includeInstance, f),
    archived: (f = msg.getArchived()) && proto.iyag.io.chat.ChannelUserEvent.Archive.toObject(includeInstance, f),
    joined: (f = msg.getJoined()) && proto.iyag.io.chat.ChannelUserEvent.Join.toObject(includeInstance, f),
    left: (f = msg.getLeft()) && proto.iyag.io.chat.ChannelUserEvent.Leave.toObject(includeInstance, f),
    typed: (f = msg.getTyped()) && proto.iyag.io.chat.ChannelUserEvent.Type.toObject(includeInstance, f),
    sent: (f = msg.getSent()) && proto.iyag.io.chat.ChannelUserEvent.Send.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent}
 */
proto.iyag.io.chat.ChannelUserEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent;
  return proto.iyag.io.chat.ChannelUserEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent}
 */
proto.iyag.io.chat.ChannelUserEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.iyag.io.chat.EventMeta;
      reader.readMessage(value,proto.iyag.io.chat.EventMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 101:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorId(value);
      break;
    case 201:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Create;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Create.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 202:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Archive;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Archive.deserializeBinaryFromReader);
      msg.setArchived(value);
      break;
    case 203:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Join;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Join.deserializeBinaryFromReader);
      msg.setJoined(value);
      break;
    case 204:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Leave;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Leave.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 205:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Type;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Type.deserializeBinaryFromReader);
      msg.setTyped(value);
      break;
    case 206:
      var value = new proto.iyag.io.chat.ChannelUserEvent.Send;
      reader.readMessage(value,proto.iyag.io.chat.ChannelUserEvent.Send.deserializeBinaryFromReader);
      msg.setSent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.iyag.io.chat.EventMeta.serializeBinaryToWriter
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      101,
      f
    );
  }
  f = message.getAuthorId();
  if (f.length > 0) {
    writer.writeString(
      102,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Create.serializeBinaryToWriter
    );
  }
  f = message.getArchived();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Archive.serializeBinaryToWriter
    );
  }
  f = message.getJoined();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Join.serializeBinaryToWriter
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Leave.serializeBinaryToWriter
    );
  }
  f = message.getTyped();
  if (f != null) {
    writer.writeMessage(
      205,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Type.serializeBinaryToWriter
    );
  }
  f = message.getSent();
  if (f != null) {
    writer.writeMessage(
      206,
      f,
      proto.iyag.io.chat.ChannelUserEvent.Send.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Create.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Create';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Create.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Create}
 */
proto.iyag.io.chat.ChannelUserEvent.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Create;
  return proto.iyag.io.chat.ChannelUserEvent.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Create}
 */
proto.iyag.io.chat.ChannelUserEvent.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.iyag.io.chat.ChannelUserEvent.Create.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iyag.io.chat.ChannelUserEvent.Create.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Archive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Archive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Archive.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Archive';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Archive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Archive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Archive}
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Archive;
  return proto.iyag.io.chat.ChannelUserEvent.Archive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Archive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Archive}
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Archive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Archive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Archive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Join = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Join, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Join.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Join';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Join.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Join.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Join} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Join.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Join}
 */
proto.iyag.io.chat.ChannelUserEvent.Join.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Join;
  return proto.iyag.io.chat.ChannelUserEvent.Join.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Join} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Join}
 */
proto.iyag.io.chat.ChannelUserEvent.Join.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Join.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Join.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Join} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Join.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Leave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Leave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Leave.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Leave';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Leave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Leave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Leave}
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Leave;
  return proto.iyag.io.chat.ChannelUserEvent.Leave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Leave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Leave}
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Leave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Leave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Leave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Type.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Type';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Type.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Type}
 */
proto.iyag.io.chat.ChannelUserEvent.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Type;
  return proto.iyag.io.chat.ChannelUserEvent.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Type}
 */
proto.iyag.io.chat.ChannelUserEvent.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iyag.io.chat.ChannelUserEvent.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iyag.io.chat.ChannelUserEvent.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iyag.io.chat.ChannelUserEvent.Send.displayName = 'proto.iyag.io.chat.ChannelUserEvent.Send';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.iyag.io.chat.ChannelUserEvent.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Send.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: (f = msg.getEntry()) && iyag_io_chat_entry_pb.Entry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Send}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iyag.io.chat.ChannelUserEvent.Send;
  return proto.iyag.io.chat.ChannelUserEvent.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iyag.io.chat.ChannelUserEvent.Send}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new iyag_io_chat_entry_pb.Entry;
      reader.readMessage(value,iyag_io_chat_entry_pb.Entry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iyag.io.chat.ChannelUserEvent.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iyag.io.chat.ChannelUserEvent.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iyag.io.chat.ChannelUserEvent.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      iyag_io_chat_entry_pb.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * optional Entry entry = 1;
 * @return {?proto.iyag.io.chat.Entry}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.prototype.getEntry = function() {
  return /** @type{?proto.iyag.io.chat.Entry} */ (
    jspb.Message.getWrapperField(this, iyag_io_chat_entry_pb.Entry, 1));
};


/** @param {?proto.iyag.io.chat.Entry|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.Send.prototype.setEntry = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iyag.io.chat.ChannelUserEvent.Send.prototype.clearEntry = function() {
  this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.Send.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventMeta meta = 100;
 * @return {?proto.iyag.io.chat.EventMeta}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getMeta = function() {
  return /** @type{?proto.iyag.io.chat.EventMeta} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.EventMeta, 100));
};


/** @param {?proto.iyag.io.chat.EventMeta|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setMeta = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional string channel_name = 101;
 * @return {string}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/** @param {string} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setChannelName = function(value) {
  jspb.Message.setProto3StringField(this, 101, value);
};


/**
 * optional string author_id = 102;
 * @return {string}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getAuthorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/** @param {string} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setAuthorId = function(value) {
  jspb.Message.setProto3StringField(this, 102, value);
};


/**
 * optional Create created = 201;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Create}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getCreated = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Create} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Create, 201));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Create|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setCreated = function(value) {
  jspb.Message.setOneofWrapperField(this, 201, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional Archive archived = 202;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Archive}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getArchived = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Archive} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Archive, 202));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Archive|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setArchived = function(value) {
  jspb.Message.setOneofWrapperField(this, 202, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearArchived = function() {
  this.setArchived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasArchived = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional Join joined = 203;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Join}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getJoined = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Join} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Join, 203));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Join|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setJoined = function(value) {
  jspb.Message.setOneofWrapperField(this, 203, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearJoined = function() {
  this.setJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasJoined = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional Leave left = 204;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Leave}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getLeft = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Leave} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Leave, 204));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Leave|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setLeft = function(value) {
  jspb.Message.setOneofWrapperField(this, 204, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearLeft = function() {
  this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 204) != null;
};


/**
 * optional Type typed = 205;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Type}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getTyped = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Type} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Type, 205));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Type|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setTyped = function(value) {
  jspb.Message.setOneofWrapperField(this, 205, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearTyped = function() {
  this.setTyped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasTyped = function() {
  return jspb.Message.getField(this, 205) != null;
};


/**
 * optional Send sent = 206;
 * @return {?proto.iyag.io.chat.ChannelUserEvent.Send}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.getSent = function() {
  return /** @type{?proto.iyag.io.chat.ChannelUserEvent.Send} */ (
    jspb.Message.getWrapperField(this, proto.iyag.io.chat.ChannelUserEvent.Send, 206));
};


/** @param {?proto.iyag.io.chat.ChannelUserEvent.Send|undefined} value */
proto.iyag.io.chat.ChannelUserEvent.prototype.setSent = function(value) {
  jspb.Message.setOneofWrapperField(this, 206, proto.iyag.io.chat.ChannelUserEvent.oneofGroups_[0], value);
};


proto.iyag.io.chat.ChannelUserEvent.prototype.clearSent = function() {
  this.setSent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iyag.io.chat.ChannelUserEvent.prototype.hasSent = function() {
  return jspb.Message.getField(this, 206) != null;
};


goog.object.extend(exports, proto.iyag.io.chat);
